// See https://aka.ms/new-console-template for more information

using System.Text.RegularExpressions;

string[] allLines = File.ReadAllLines(@"c:\temp\input.txt");

Regex parserNumber = new Regex(@"^(.*):\ (\d+)");
Regex parserOperation = new Regex(@"^(.*):\ (.*)\ ([\-*/+])\ (.*)");

IDictionary<string, Monkey> monkeys = new Dictionary<string, Monkey>();

monkeys = allLines.Select(line =>
{
    if (line.StartsWith("humn"))
    {
        return new Monkey { Name = "humn" };
    }
    if (parserNumber.IsMatch(line))
    {
        var match = parserNumber.Match(line);

        return new Monkey
        {
            SafeValue = long.Parse(match.Groups[2].Value),
            Name = match.Groups[1].Value
        };
    }
    else
    {
        var match = parserOperation.Match(line);
        var name = match.Groups[1].Value;
        var op1 = match.Groups[2].Value;
        var op2 = match.Groups[4].Value;
        var op = match.Groups[3].Value;

        Func<long, long, long> operation;
        Func<string, string, string> strOperation;

        switch (op)
        {
            case "*": operation = (a, b) => a * b; strOperation = (a, b) => string.Format($"({a} * {b})"); break;
            case "/": operation = (a, b) => a / b; strOperation = (a, b) => string.Format($"({a} / {b})"); break;
            case "-": operation = (a, b) => a - b; strOperation = (a, b) => string.Format($"({a} - {b})"); break;
            case "+": operation = (a, b) => a + b; strOperation = (a, b) => string.Format($"({a} + {b})"); break;
            default: throw new InvalidOperationException();
        }

        return new Monkey { Name = name, Op1 = op1, Op2 = op2, Operation = operation, StrOperation = strOperation };
    }
}).ToDictionary(m => m.Name, m => m);

int countGood = 0;
int countBad = 0;

foreach (var monkey in monkeys.Values)
{
    var s = monkey.CalculateSafeValueAndCache(monkeys);

    if (s.HasValue)
    {
        countGood++;
    }
    else
    {
        countBad++;
    }
}

Console.WriteLine($"Good {countGood} Bad {countBad}");

var testMonkey = monkeys["root"];
var monkeyA = monkeys[testMonkey.Op1];
var monkeyB = monkeys[testMonkey.Op2];
var monkeyMe = monkeys["humn"];

Console.WriteLine($"{monkeyA.GetStrValue(monkeys)} = {monkeyB.GetStrValue(monkeys)}");

// Takes too long
// for (long i = 0; i < 10000000000000; i++)
// {
//     IDictionary<string, long> unsafeCache = new Dictionary<string, long>();
//
//     monkeyMe.SafeValue = i;
//
//     if (monkeyA.GetValue(unsafeCache, monkeys) == monkeyB.GetValue(unsafeCache, monkeys))
//     {
//         Console.WriteLine(i);
//         break;
//     }
//     else if (i % 1000 == 0)
//     {
//         Console.WriteLine(i);
//     }
// }


/* too lazy to code it, still it would be quite doable..

3*(37906634593933-((527+(((((((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414)*2)+756)/3))/3))=56517685690674

37906634593933-((527+(((((((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414)*2)+756)/3))/3)=18839228563558

(527+(((((((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414)*2)+756)/3))/3=19067406030375

527+(((((((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414)*2)+756)/3)=57202218091125

((((((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414)*2)+756)/3=57202218090598

(((((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414)*2)+756=171606654271794

((((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414)*2=171.606.654.271.038

(((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3)-414= 85.803.327.135.519

((((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237)*3=85.803.327.135.933

(((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2)-237 = 28.601.109.045.311

((3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121)/2 = 28.601.109.045.548

(3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)))+121 = 57.202.218.091.096

3*(336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2))=57.202.218.090.975

336+((((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2)=19.067.406.030.325

(((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677)/2 = 19.067.406.029.989

((788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3)-677
38.134.812.059.978

(788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)))/3
38.134.812.060.655

788+(110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523))
114.404.436.181.965

110+(((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523)
114.404.436.181.177

((585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10)-523
114.404.436.181.067

(585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3))*10
114.404.436.181.590

585+(((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3)
114.404.436.181.59

((((((((((((((920+((((4*((((2*(((((20*(169+(((8*(409+(((((2*(((((796+(52*(107+((X-138)/2))))/2)-238)*2)+60))-586)/10)-479)/4)))-944)/8)))+41)+433)/2)-963))+477)/5)-175))+992)*2)-483))/3)+873)*2)-882)/
6)+398)*3)-298)+4)/3)+727)*2)-366)/3=11440443617574

X = 3712643961892

*/